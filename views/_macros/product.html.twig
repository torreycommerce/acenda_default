{% macro gridproduct(product, options=['carousel','image','details']) %}
	{% spaceless %}
	{% set product =  product|merge({'variant':product.product|values_in('variant')}) %}
	{% set product =  product|merge({'attributes':product.variant|values_in(['price','compare_price','save_price','save_percent','regular_price','color'])}) %}
	
	{% import _self as this %}
	{% import "/_macros/base.html.twig" as base %}
	{% set useAutoRot = 0 %}
	<div class="product g">
		<a href="{{app.url}}/product/{{product.slug}}">
		{% if 'image' in options %}
			{# Grab image based on color facets #}
			{% if product.images is not empty %}
			    {% set potentialImages = [] %}
			    {% for imo in product.images %}
			        {% if imo.type != "swatch" %}
			            {% set potentialImages = potentialImages|merge([imo]) %}
			        {% endif %}
			    {% endfor %}
			    {% if potentialImages|length > 0 %}
				    {% set image_url = app.image.getImageUrl('product','thumbnail', potentialImages[0].id) %}
				{% endif %}
			{% endif %}
			{% if image_url is empty %}
				{% set fallback = "" %}
				{% set image_url = "" %}
				{# Look for first variant with images, price>0 and has_stock #}
				{% for variant in product.variant %}
					{% if loop.first %}
						{% set fallback = app.image.getImageUrl('product','thumbnail', variant.images[0].id) %}
					{% endif %}
					{% if variant.status == 'active' 
					and variant.price>0 
					and variant.has_stock 
					and variant.images is not empty 
					and image_url is empty %}
						{% set image_url = app.image.getImageUrl('product','thumbnail', variant.images[0].id) %}
					{% endif %}
				{% endfor %}
				{% if image_url is empty %}
					{% set image_url = fallback %}
				{% endif %}
			{% endif %}
			{% if useAutoRot and potentialImages|length > 1 %}
                {% set dataRot = "" %}
                {% for pI in potentialImages %}
                    {% if loop.first %}
                        {% set dataRot = app.image.getImageUrl('product','thumbnail', pI.id) %}
                    {% else %}
                        {% set dataRot = dataRot ~ "," ~ app.image.getImageUrl('product','thumbnail', pI.id) %}
			        {% endif %}
                {% endfor %}
			{% endif %}

			<div class="max-250 mb-3">
				<div class="image-space">
					<img id="product-image-{{product.id}}" src="{{ image_url }}" class="img-fluid isd" {% if dataRot %}data-rot="{{dataRot}}"{% endif %}width="250" height="250" alt="">
					<div class="badges">
					{% for tag in product.tags %}
                        {% set tagd = tag|title|replace({'-':' '}) %}
						{% if tag == 'new' %}
							<span class="badge badge-success badge-{{tag}}">{{ tagd }}</span>
						{% elseif tag == 'sale' %}
							<span class="badge badge-danger badge-{{tag}}">{{ tagd }}</span>
						{% else %}
							<span class="badge badge-primary badge-{{tag}}">{{ tagd }}</span>
						{% endif %}
					{% endfor %}
					</div>
				</div>
			</div>                            

		{% endif %}
			<h3 class="brand-product">
				<span class="brand"><span>{{product.brand}} </span></span><span class="product-name"><span>{{product.name}}</span></span>
			</h3>
		
		</a>
	{% if 'details' in options %}
		<div class="pricing g mb-3">
		    {% set pricearray = [] %}
            {% set minValue, maxValue, bestComp, bestSave, bestSaveP, loopPrice, loopComp, loopSave, loopSaveP = 0,0,0,0,0,0,0,0,0 %}
        	{% for p in product.variant %}
                {#<p class="fsd1 mb-1">l. p: {{p.price}} | pr: {{p.regular_price}} | pc: {{p.compare_price}}</p>#}
                {% if p.regular_price is empty %}
                    {% set loopPrice = p.price %}
                {% else %}
                    {% set loopPrice = p.regular_price %}
                {% endif %}
                {% if loop.first %}
                    {% set minValue, maxValue = loopPrice, loopPrice %}
                {% else %}
                    {% set minValue = min(loopPrice, minValue) %}
                    {% set maxValue = max(loopPrice, maxValue) %}
                {% endif %}
                {% if minValue == 0 %}
                    {% set minValue = loopPrice %}
                {% endif %}
                {% if p.compare_price > 0 and loopPrice > 0 %}
                    {% set loopSave = p.compare_price - loopPrice %}
                    {% set loopSaveP = (1 - (loopPrice / p.compare_price)|number_format(2)) * 100 %}
                    {% if loopSaveP > bestSaveP or (loopSaveP == bestSaveP and loopSave > bestSave) %}
                        {% set bestComp = p.compare_price %}
                        {% set bestSave = (p.compare_price - loopPrice)|number_format(1) %}
                        {% set bestSaveP = loopSaveP %}
                    {% endif %}
                {% endif %}
                {#<p class="fsd1">d: mn:{{minValue}}, mx:{{maxValue}}, bc:{{bestComp}}, bs:{{bestSave}}, bsp:{{bestSaveP}}</p>#}
        	{% endfor %}
        	{% set pricearray = pricearray|merge([minValue,maxValue]) %}
        	{#<p class="fsd1">aft: mn:{{minValue}}, mx:{{maxValue}}, bc:{{bestComp}}, bs:{{bestSave}}, bsp:{{bestSaveP}}</p>#}
		    
            {% set priceclass = "" %}
		    {% if product.attributes.regular_price is not empty %}
		        {% set priceclass = " price-special" %}
		    {% endif %}
		    
			{% if pricearray is not empty %}
			    <div class="price{{priceclass}} mb-2"><span>{{ this.price(pricearray) }}</span></div>
			{% endif %}
			{# if product.attributes.price.0 >= 100 %}
			<div class="price-per-month d-none d-md-block">
				<span data-tooltip data-toggle="tooltip" data-original-title="Spread payments over six months by selecting &quot;Checkout with Paypal&quot; on the Shopping Cart page. Then log in and apply for a &quot;Bill Me Later&quot; account.">{{ this.billmelater(product.attributes.price) }}</span>
			</div>
			{% endif #}
			{% if bestComp > 0 %}
			{% spaceless %}
			<ul class="list-inline">
				<li class="price-compare">{{ this.cprice(bestComp) }}</li>
				<li class="percent">{{ this.saveprice(bestSave) }}{{ this.savepercent(bestSaveP) }}</li>
			</ul>
			{% endspaceless %}
			{% endif %}
		</div>

		{# There is no point in having a carousel without an image, so it is moved inside here #}
		{% if 'carousel' in options %}
			{# Begin image carousel insert #}
			{{ this.carousel(product) }}
			{# End image carousel insert #}
		{% endif %}

		{% set reviews = api.get('/productreview', { query:{ product_id: product.id,status:"active" } }) %}
		{% set review_score = reviews|average('score') %}
		{% if review_score > 0 %}
		{% spaceless %}
		<div class="fsd1 rating">
			{{ base.rating( review_score ) }}
			<span class="dib"><span>{{ (review_score * 5)|number_format(1) }}</span>
				{% if reviews.num_total %}(<span>{{ reviews.num_total }}</span>)
				{% endif %}
			</span>
		</div>
		{% endspaceless %}
		{% endif %}
	{% endif %}
	</div>
	{% endspaceless %}
{% endmacro %}

{% macro carousel(product) %}
{% spaceless %}
{# Begin image carousel #}
{% if product.attributes.color|length > 1 %}
	{% if product.variant is not empty %}
		<div class="color-chips mb-3">
			<div class="row row-thin">
			{% set colors = [] %}
			{% set maxBox = 5 %}
			{% set hasBox = 0 %}
			{% set surBox = 0 %}
			{% for item,child in product.variant if 
			    child.status == 'active' 
				and child.images is not empty
				and child.color not in colors %}
				{% set colors = colors|merge([child.color]) %}
				{% set hasBox = hasBox + 1 %}
			{% endfor %}
			{% if hasBox > maxBox %}
                {% set surBox = hasBox - (maxBox - 1) %}
                {% set hasBox = 4 %}
			{% endif %}
			{#<p>s:{{surBox}}, h:{{hasBox}}, m:{{maxBox}}</p>#}
			{# #}
			{% set colors = [] %}
			{% for item,child in product.variant if 
				child.status == 'active' 
				and child.images is not empty
				and child.color not in colors %}
				{% set image_url0 = "" %}
			    {% set image_url = "" %}
			    {% set thiscolor = child.color %}
				{% set colors = colors|merge([child.color]) %}
				{% set imagevar = product.images %}
				{% set image_url0 = imagevar|find({'name':thiscolor,'type':'swatch'}) %}
				{% if image_url0 is not empty %}
				    {% set image_url = image_url0[0].thumbnail %}
			    {% endif %}
			    {% set image_urlB = app.image.getImageUrl('product','thumbnail', child.images[0].id) %}
				{% if image_url is empty %}
				    {% set image_url = image_urlB %}
			    {% endif %}
			    {% if loop.index == maxBox %}
                    <div class="col-2 col-thin color-chip fsd1">
                        <div class="image-space bg-light"><div class="isd">+{{surBox}} <span class="sr-only">more colors</span></div></div>
                    </div>
			    {% elseif loop.index < maxBox %}
    				<div class="col-2 col-thin color-chip">
    					<button class="btn blank image-space" data-image-swap="product-image-{{product.id}}" data-image-swap-src="{{ image_urlB }}"><img src="{{ image_url }}" class="img-fluid isd" width="250" height="250" alt="See {{product.name}} in {{child.color}}"></button>
    				</div>
    			{% endif %}
			{% endfor %}
			</div>
		</div>
	{% endif %}
{% else %}
	{#<div class="empty-carousel d-xsm-none"></div>#}
{% endif %}
{# End image carousel #}
{% endspaceless %}
{% endmacro %}



{% macro getcur() %}{{ app.params.site.currency | upper }}{% endmacro %} {# EUR #}

{% macro getcurs() %}{{ app.currency.symbol(app.params.site.currency) }}{% endmacro %} {# € #}

{% macro currency(val,ip,add) %}
{#	price,
	optional bool for if itemprop html is desired,
	optional string for itemprop value other than just "price"
#}
	{% set cur = app.params.site.currency | upper %} {# EUR #}
	{% set curs = app.currency.symbol(app.params.site.currency) %} {# € #}
	{% set show_price = api.get('/customer/permissions').show_prices %}

	{% set add = add %}
	{% if add is empty %}
		{% set add = "price" %}
	{% endif %}
	{% if show_price == false %} {# or val == 0  #}
		
	{% elseif cur == "EUR" %}
		{% if ip == 1 %}
			<span class="val">{{val}}</span><span class="cursign" content="{{cur}}">{{curs}}</span>
		{% else %}
			<span class="val">{{val}}</span><span class="cursign">{{curs}}</span>
		{% endif %}
	{% else %}
		{% if ip == 1 %}
			<span class="cursign" content="{{cur}}">{{curs}}</span><span class="val">{{val}}</span>
		{% else %}
			<span class="cursign">{{curs}}</span><span class="val">{{val}}</span>
		{% endif %}
	{% endif %}
{% endmacro %}


{% macro price(prices) %}
{% import _self as this %}
{% spaceless %}
	{% if prices is not iterable %}
		{{ this.currency(prices|number_format(2),1) }}
	{% else %}
		{% set min = prices[0] %}
		{% set max = prices[0] %}
		{% for price in prices %}
			{% set min = min > price ? price : min %}
			{% set max = max < price ? price : max %}
		{% endfor %}
		{% if min == 0 and min == 0 %}
			
		{% elseif min == max or min == 0 %}
			{{ this.currency(max|number_format(2),1) }}
		{% else %}
		    <span>
			{{ this.currency(min|number_format(2),1,"price minPrice") }}<span class="splitter"> - </span>{{ this.currency(max|number_format(2),1,"maxPrice") }}
          </span>
		{% endif %}
	{% endif %}
{% endspaceless %}
{% endmacro %}

{% macro cprice(prices) %}
{% import _self as this %}
{% spaceless %}
	{% if prices is not iterable %}
		{{ this.currency(prices|number_format(2)) }}
	{% else %}
		{% set min = prices[0] %}
		{% set max = prices[0] %}
		{% for price in prices %}
			{% set min = min > price ? price : min %}
			{% set max = max < price ? price : max %}
		{% endfor %}
		{% if min == 0 and min == 0 %}
			
		{% elseif min == max or min == 0 %}
			{{ this.currency(max|number_format(2)) }}
		{% else %}
		    {{ this.currency(min|number_format(2)) }} - {{ this.currency(max|number_format(2)) }}
		{% endif %}
	{% endif %}
{% endspaceless %}
{% endmacro %}

{% macro billmelater(prices, text='per month*') %}
{% spaceless %}
	{% if prices is not iterable %}
		${{(prices/6)|number_format(2)}} {{text}}
	{% else %}
		{% set min = prices[0] %}
		{% set max = prices[0] %}
		{% for price in prices %}
			{% set min = min > price ? price : min %}
			{% set max = max < price ? price : max %}
		{% endfor %}
		{% if max >= 100 %}
			${{(max/6)|number_format(2)}} {{text}}
		{% endif %}
	{% endif %}
{% endspaceless %}
{% endmacro %}

{% macro saveprice(saveprices) %}
{% import _self as this %}
{% spaceless %}
	{% if saveprices is not iterable %}
		<span class="lang">Save </span>{{ this.currency(saveprices|number_format(0)) }}
	{% else %}
		{% set max = saveprices[0] %}
		{% for price in saveprices %}
			{% set max = max < price ? price : max %}
		{% endfor %}
		{% if max > 1 %}
			<span class="lang">Save </span>{{ this.currency(max|number_format(0)) }}
		{% endif %}
	{% endif %}
{% endspaceless %}
{% endmacro %}

{% macro savepercent(percents) %}
{% import _self as this %}
{% spaceless %}
	{% if percents is not iterable %}
		<span class="percs d-none d-md-inline"> (<span class="val">{{ percents }}</span>%)</span>
	{% else %}
		{% set max = percents[0] %}
		{% for percent in percents %}
			{% set max = max < percent ? percent : max %}
		{% endfor %}
		{% if max > 0 %}
			<span class="percs d-none d-md-inline"> (<span class="val">{{ max }}</span>%)</span>
		{% endif %}
	{% endif %}
{% endspaceless %}
{% endmacro %}
